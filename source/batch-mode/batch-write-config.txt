.. meta::
   :robots: noindex, nosnippet 

.. _spark-batch-write-conf:

=================================
Batch Write Configuration Options
=================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _spark-batch-output-conf:

Overview
--------

You can configure the following properties when writing data to MongoDB in batch mode.

.. include:: /includes/conf-write-prefix.rst

.. list-table::
   :header-rows: 1
   :widths: 35 65

   * - Property name
     - Description
   
   * - ``connection.uri``
     - | **Required.**
       | The connection string configuration key.
       |
       | **Default:** ``mongodb://localhost:27017/``

   * - ``database``
     - | **Required.**
       | The database name configuration.

   * - ``collection``
     - | **Required.**
       | The collection name configuration.

   * - ``idFieldList``
     - | Field or list of fields by which to split the collection data. To
         specify more than one field, separate them using a comma as shown
         in the following example:

       .. code-block:: none
          :copyable: false

          "fieldName1,fieldName2"

       | **Default:** ``_id``

   * - ``maxBatchSize``
     - | Specifies the maximum number of operations to batch in bulk
         operations.
       |
       | **Default:** ``512``

   * - ``mongoClientFactory``
     - | MongoClientFactory configuration key.
       | You can specify a custom implementation that must implement the
         ``com.mongodb.spark.sql.connector.connection.MongoClientFactory``
         interface.
       |
       | **Default:** ``com.mongodb.spark.sql.connector.connection.DefaultMongoClientFactory``

   * - ``operationType``
     - | Specifies the type of write operation to perform. You can set
         this to one of the following values:

       - ``insert``: Insert the data.
       - ``replace``: Replace an existing document that matches the
         ``idFieldList`` value with the new data. If no match exists, the
         value of ``upsertDocument`` indicates whether the connector
         inserts a new document.
       - ``update``: Update an existing document that matches the
         ``idFieldList`` value with the new data. If no match exists, the
         value of ``upsertDocument`` indicates whether the connector
         inserts a new document.

       |
       | **Default:** ``replace``

   * - ``ordered``
     - | Specifies whether to perform ordered bulk operations.
       |
       | **Default:** ``true``

   * - ``writeConcern.journal``
     - | Specifies ``j``, a write-concern option to enable request for
         acknowledgment that the data is confirmed on on-disk journal for
         the criteria specified in the ``w`` option. You can specify
         either ``true`` or ``false``.
       |
       | For more information on ``j`` values, see the MongoDB server
         guide on the
         :manual:`WriteConcern j option </reference/write-concern/#j-option>`.

   * - ``writeConcern.w``
     - | Specifies ``w``, a write-concern option to request acknowledgment
         that the write operation has propagated to a specified number of
         MongoDB nodes. For a list
         of allowed values for this option, see :manual:`WriteConcern
         </reference/write-concern/#w-option>` in the MongoDB manual.
       |
       | **Default:** ``1``

   * - ``writeConcern.wTimeoutMS``
     - | Specifies ``wTimeoutMS``, a write-concern option to return an error
         when a write operation exceeds the number of milliseconds. If you
         use this optional setting, you must specify a nonnegative integer.
       |
       | For more information on ``wTimeoutMS`` values, see the MongoDB server
         guide on the
         :manual:`WriteConcern wtimeout option </reference/write-concern/#wtimeout>`.

Specifying Properties in ``connection.uri``
-------------------------------------------

.. include:: /includes/connection-write-config.rst
